from flask import jsonify, request, session
from flask_restful import Resource
from . import api
from app.db import mongo
from datetime import datetime
from bson.objectid import ObjectId

class newsShowCase(Resource):
    def get(self):
        offset = int( request.args.get('offset', 0) )
        limit = min( int(request.args.get('limit',5)), 5 )

        db = mongo.cx['newChannels']
        res = db.newschannel.find().skip(offset).limit(limit)

        newsChannels = []
        for newsChannel in res:
            newsChannel['_id'] = str(newsChannel['_id'])
            newsChannels.append(newsChannel)
        
        return jsonify(newsChannels)
    
    def patch(self):
        if not session.get('_id', None):
            return jsonify({'message': "Can not Patch"}), 401
        data = request.json
        db = mongo.cx['newChannels']
        res = db.newschannel.find( { "_id": ObjectId(f'{data['_id']}') } , {"_id": 0, "name": 1} )
        res = list(res)
        channelName = res[0]['name']

        # session['_id'] is userid with respect to the db autogenerated id
        res = db.follow.update_one(
            {'_id': session['_id']},
            { '$addToSet': {"following.newschannels": channelName } },
            upsert = True
        )

        # if the modified_count is zero and there is no upserted in the db this means deletion has to happen
        if res.modified_count == 0 and res.upserted_id is None:
            res = db.follow.update_one(
                {'_id': session['_id']},
                {'$pull': {'following.newschannels': channelName }}
            )
            session['following'] = { 
                'newschannels': [ x for x in session['following'].get('newschannels', []) if x != channelName  ],
                'states': session['following'].get('states',[]),
                'countries': session['following'].get('countries',[])
            } 
            message = 'UnFollow'
        else:
            message = 'Follow'
            session['following'] = {
                'newschannels': [ x for x in session['following'].get('newschannels', []) ] + [channelName],
                'states': session['following'].get('states',[]),
                'countries': session['following'].get('countries',[])
            }
        return jsonify({'message': message})

class newsChannels(Resource):
    def get(self, channelName):
        offset = int( request.args.get('offset', 0) )
        limit = min( int(request.args.get('limit',5)), 5 )

        db = mongo.cx['newChannels']
        pipeline = [
	        {'$match': {"name": channelName}},            
	        {'$unwind': "$articles"},
	        {'$addFields':{
		        "articles.channelId": "$_id",
		        "articles.channelName": "$name"
	            } 
	        },
	        { "$replaceRoot": {"newRoot": "$articles"} },
	        { "$sort": {"timestamp": -1} },
            { "$skip": offset },
            { "$limit": limit }
        ]
        res = db.newschannel.aggregate(pipeline)
        res = list(res)
        return jsonify( res )

api.add_resource(newsShowCase, '/newsShowCase')
api.add_resource(newsChannels, '/newsShowCase/<channelName>')