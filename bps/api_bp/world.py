from flask import jsonify, request, session
from flask_restful import Resource
from . import api
from app.db import mongo
from datetime import datetime
from bson.json_util import dumps

class World(Resource):
    def get(self):
        offset = int( request.args.get('offset', 0) )
        limit = min( int(request.args.get('limit',5)), 5 )
        
        db = mongo.cx['newChannels']
        pipeline = [
	        {'$unwind': "$articles"},
	        {'$addFields':{
		        "articles.channelId": "$_id",
		        "articles.channelName": "$name"
	            } 
	        },
	        { "$replaceRoot": {"newRoot": "$articles"} },
	        { "$sort": {"timestamp": -1} },
            { "$skip": offset },
            { "$limit": limit }
        ]
        res = db.newschannel.aggregate(pipeline)
        res = list(res)
        return jsonify( res )

class Country(Resource):
    def get(self, country):
        offset = int( request.args.get('offset', 0) )
        limit = min( int(request.args.get('limit',5)), 5 )

        db = mongo.cx['newChannels']
        pipeline = [
	        {'$unwind': "$articles"},
	        {'$match': {"articles.countryname": country}},
	        {'$addFields':{
		        "articles.channelId": "$_id",
		        "articles.channelName": "$name"
	            } 
	        },
	        { "$replaceRoot": {"newRoot": "$articles"} },
	        { "$sort": {"timestamp": -1} },
            { "$skip": offset },
            { "$limit": limit }
        ]
        res = db.newschannel.aggregate(pipeline)
        res = list(res)
        return jsonify( res )
    
    def patch(self,country):
        if not session.get('_id', None):
            return jsonify({'message': "Can not Patch"}), 401
        # country
        data = request.json
        db = mongo.cx['newChannels']

        # session['_id'] is userid with respect to the db autogenerated id
        res = db.follow.update_one(
            {'_id': session['_id']},
            { '$addToSet': {"following.countries": data['country'] } },
            upsert = True
        )
        # if the modified_count is zero and there is no upserted in the db this means deletion has to happen
        if res.modified_count == 0 and res.upserted_id is None:
            res = db.follow.update_one(
                {'_id': session['_id']},
                {'$pull': {'following.countries': data['country'] }}
            )
            session['following'] = { 
                'newschannels': session['following'].get('newschannels',[]),
                'states': session['following'].get('states',[]),
                'countries': [ x for x in session['following'].get('countries',[]) if x != data['country']  ]
            } 
            message = 'UnFollow'
        else:
            message = 'Follow'
            session['following'] = {
                'newschannels': session['following'].get('newschannels', []),
                'states': session['following'].get('states', []),
                'countries': [ x for x in session['following'].get('countries', []) ] + [data['country']]
            }
        return jsonify({'message': message})


class Locals(Resource):
    def get(self, country, state):
        offset = int( request.args.get('offset', 0) )
        limit = min( int(request.args.get('limit',5)), 5 )

        db = mongo.cx['newChannels']
        pipeline = [
	        {'$unwind': "$articles"},
	        {'$match': {"articles.countryname": country, "articles.statename": state}},
	        {'$addFields':{
		        "articles.channelId": "$_id",
		        "articles.channelName": "$name"
	            } 
	        },
	        { "$replaceRoot": {"newRoot": "$articles"} },
	        { "$sort": {"timestamp": -1} },
            { "$skip": offset },
            { "$limit": limit }
        ]
        res = db.newschannel.aggregate(pipeline)
        res = list(res)
        return jsonify( res )
        
    def patch(self,country, state):
        print("local patch")
        if not session.get('_id', None):
            return jsonify({'message': "Can not Patch"}), 401
        # state
        data = request.json
        db = mongo.cx['newChannels']

        # session['_id'] is userid with respect to the db autogenerated id
        res = db.follow.update_one(
            {'_id': session['_id']},
            { '$addToSet': {"following.states": [state, country] } },
            upsert = True
        )
        # if the modified_count is zero and there is no upserted in the db this means deletion has to happen
        if res.modified_count == 0 and res.upserted_id is None:
            res = db.follow.update_one(
                {'_id': session['_id']},
                {'$pull': {'following.states': [state, country] }}
            )
            session['following'] = { 
                'newschannels': session['following'].get('newschannels',[]),
                'states': [ x for x in session['following'].get('states',[]) if x != [ state, country ]  ],
                'countries': session['following'].get('countries', [])
            } 
            message = 'UnFollow'
        else:
            message = 'Follow'
            session['following'] = {
                'newschannels': session['following'].get('newschannels',[]),
                'states': [ x for x in session['following'].get('states',[]) ] + [ [state, country] ],
                'countries': session['following'].get('countries', [])
            }
        return jsonify({'message': message})
    
api.add_resource(World, '/world')
api.add_resource(Country, '/world/<country>')
api.add_resource(Locals, '/world/<country>/<state>')